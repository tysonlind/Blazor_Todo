@page "/tiktok-recommendations"

@inject Blazor_Todo.Data.Services.TikTokRecommendedDataService ApiService

<h3>TikTok Recommendations</h3>
@if (isLoading == false)
{
    <button @onclick="RefetchRecommendations" class="btn btn-primary m-3">Refresh Recommendations</button>
}

@if (isLoading)
{
    <p>Loading...</p>
}
else if (recommendations != null && recommendations.AwemeList?.Count > 0)
{
    <div class="card-container container-fluid d-flex">
        @foreach (var recommendation in recommendations.AwemeList)
        {
            <div class="d-flex flex-column tiktok-card">
                <h2>Description</h2>
                <h4>
                    @if (!string.IsNullOrEmpty(recommendation.Description) && recommendation.Description.Length > 100)
                    {
                        @($"{recommendation.Description.Substring(0, 100)}...")
                    }
                    else
                    {
                        @recommendation.Description
                    }
                </h4>
                <h3>Share<span class="bi bi-link-45deg"></span></h3>
                <p>@recommendation.ShareUrl</p>
                <h3>Stats</h3>
                <p>Comments: @recommendation.Statistics?.CommentCount</p>
                <p>Shares: @recommendation.Statistics?.PlayCount</p>
            </div>
        }
    </div>
}
else if (recommendations != null && recommendations.AwemeList?.Count == 0)
{
    <p>No recommendations available.</p>
}
else
{
    <p>Failed to load recommendations. Please try again later.</p>
}

@code {
    private TikTokRecommendedData? recommendations;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Only fetch data if recommendations are not already cached
        if (recommendations == null)
        {
            await FetchRecommendations();
        }
        return;
    }

    private async Task FetchRecommendations()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Trigger render with loading state

            // Fetch the recommendations from the API
            recommendations = await ApiService.GetTikTokRecommendationsAsync();

            // Log the result for debugging
            if (recommendations != null)
            {
                Console.WriteLine($"Fetched {recommendations.AwemeList?.Count} items.");
            }
            else
            {
                Console.WriteLine("Failed to fetch recommendations.");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefetchRecommendations()
    {
        recommendations = null;

        isLoading = true;

        try
        {
            await ApiService.GetTikTokRecommendationsAsync();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

    }
}
}
