@page "/todo"
@rendermode InteractiveServer

<h3>Todo List</h3>

<EditForm Model="@newTask" OnValidSubmit="AddTask" FormName="todoForm">
    <DataAnnotationsValidator />


    <!-- Task Name -->
    <div class="form-group">
        <label for="taskName">Task Name:</label>
        <InputText id="taskName" @bind-Value="newTask.Name" class="form-control" />
        <ValidationMessage For="@(() => newTask.Name)" />
    </div>

    <!-- Priority -->
    <div class="form-group">
        <label for="priority">Priority:</label>
        <InputSelect id="priority" @bind-Value="newTask.Priority" class="form-control" TValue="Priority?">
            <option value="">Select Priority</option>
            @foreach (Priority p in Enum.GetValues(typeof(Priority)))
            {
                <option value="@p">@p</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => newTask.Priority)" />
    </div>

    <!-- Due Date -->
    <div class="form-group">
        <label for="dueDate">Due Date:</label>
        <InputDate id="dueDate" @bind-Value="newTask.DueDate" class="form-control" TValue="DateTime?" />
        <ValidationMessage For="@(() => newTask.DueDate)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Task</button>
</EditForm>

<hr />

<h4>Debug Information</h4>
<p>Task Name: @newTask.Name</p>
<p>Priority: @newTask.Priority</p>
<p>Due Date: @newTask.DueDate?.ToString("yyyy-MM-dd")</p>

<hr />

<h4>Tasks</h4>

@if (tasks.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Priority</th>
                <th>Due Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Name</td>
                    <td>@task.Priority</td>
                    <td>@task.DueDate?.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No tasks yet. Add a task above to get started!</p>
}

@code {
    private List<TodoTask> tasks = new List<TodoTask>();

    // Changed newTask from a field to a property
    private TodoTask newTask { get; set; } = new TodoTask();

    private void AddTask()
    {
        Console.WriteLine($"AddTask called. Name: {newTask.Name}, Priority: {newTask.Priority}, Due Date: {newTask.DueDate}");

        if (string.IsNullOrWhiteSpace(newTask.Name))
        {
            Console.WriteLine("Task name is empty or whitespace.");
            return;
        }

        // Add the new task to the list
        tasks.Add(new TodoTask
        {
            Name = newTask.Name,
            Priority = newTask.Priority,
            DueDate = newTask.DueDate
        });

        // Reset the properties of newTask
        newTask.Name = string.Empty;
        newTask.Priority = null;
        newTask.DueDate = null;

        // Notify the form that the model has changed
        StateHasChanged();
    }
    public enum Priority
    {
        Low,
        Medium,
        High
    }
}
